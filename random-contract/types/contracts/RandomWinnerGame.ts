/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface RandomWinnerGameInterface extends utils.Interface {
  functions: {
    "fee()": FunctionFragment;
    "gameId()": FunctionFragment;
    "gameStarted()": FunctionFragment;
    "joinGame()": FunctionFragment;
    "owner()": FunctionFragment;
    "players(uint256)": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startGame(uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vrfWrapper()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fee"
      | "gameId"
      | "gameStarted"
      | "joinGame"
      | "owner"
      | "players"
      | "rawFulfillRandomWords"
      | "renounceOwnership"
      | "startGame"
      | "transferOwnership"
      | "vrfWrapper"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameStarted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "joinGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vrfWrapper",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vrfWrapper", data: BytesLike): Result;

  events: {
    "GameEnded(uint256,address,uint256)": EventFragment;
    "GameStarted(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PlayerJoined(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerJoined"): EventFragment;
}

export interface GameEndedEventObject {
  gameId: BigNumber;
  winner: string;
  requestId: BigNumber;
}
export type GameEndedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  GameEndedEventObject
>;

export type GameEndedEventFilter = TypedEventFilter<GameEndedEvent>;

export interface GameStartedEventObject {
  gameId: BigNumber;
  maxPlayers: BigNumber;
  entryFee: BigNumber;
}
export type GameStartedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  GameStartedEventObject
>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PlayerJoinedEventObject {
  gameId: BigNumber;
  player: string;
}
export type PlayerJoinedEvent = TypedEvent<
  [BigNumber, string],
  PlayerJoinedEventObject
>;

export type PlayerJoinedEventFilter = TypedEventFilter<PlayerJoinedEvent>;

export interface RandomWinnerGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RandomWinnerGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    gameId(overrides?: CallOverrides): Promise<[BigNumber]>;

    gameStarted(overrides?: CallOverrides): Promise<[boolean]>;

    joinGame(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rawFulfillRandomWords(
      _requestId: PromiseOrValue<BigNumberish>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startGame(
      _maxPlayer: PromiseOrValue<BigNumberish>,
      _entrayFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vrfWrapper(overrides?: CallOverrides): Promise<[string]>;
  };

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  gameId(overrides?: CallOverrides): Promise<BigNumber>;

  gameStarted(overrides?: CallOverrides): Promise<boolean>;

  joinGame(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  players(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  rawFulfillRandomWords(
    _requestId: PromiseOrValue<BigNumberish>,
    _randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startGame(
    _maxPlayer: PromiseOrValue<BigNumberish>,
    _entrayFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vrfWrapper(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    fee(overrides?: CallOverrides): Promise<BigNumber>;

    gameId(overrides?: CallOverrides): Promise<BigNumber>;

    gameStarted(overrides?: CallOverrides): Promise<boolean>;

    joinGame(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    rawFulfillRandomWords(
      _requestId: PromiseOrValue<BigNumberish>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startGame(
      _maxPlayer: PromiseOrValue<BigNumberish>,
      _entrayFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vrfWrapper(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "GameEnded(uint256,address,uint256)"(
      gameId?: null,
      winner?: null,
      requestId?: null
    ): GameEndedEventFilter;
    GameEnded(
      gameId?: null,
      winner?: null,
      requestId?: null
    ): GameEndedEventFilter;

    "GameStarted(uint256,uint256,uint256)"(
      gameId?: null,
      maxPlayers?: null,
      entryFee?: null
    ): GameStartedEventFilter;
    GameStarted(
      gameId?: null,
      maxPlayers?: null,
      entryFee?: null
    ): GameStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PlayerJoined(uint256,address)"(
      gameId?: null,
      player?: null
    ): PlayerJoinedEventFilter;
    PlayerJoined(gameId?: null, player?: null): PlayerJoinedEventFilter;
  };

  estimateGas: {
    fee(overrides?: CallOverrides): Promise<BigNumber>;

    gameId(overrides?: CallOverrides): Promise<BigNumber>;

    gameStarted(overrides?: CallOverrides): Promise<BigNumber>;

    joinGame(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawFulfillRandomWords(
      _requestId: PromiseOrValue<BigNumberish>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startGame(
      _maxPlayer: PromiseOrValue<BigNumberish>,
      _entrayFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vrfWrapper(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    joinGame(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      _requestId: PromiseOrValue<BigNumberish>,
      _randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startGame(
      _maxPlayer: PromiseOrValue<BigNumberish>,
      _entrayFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vrfWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
